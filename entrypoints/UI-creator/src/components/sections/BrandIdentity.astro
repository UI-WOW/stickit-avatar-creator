---
import { Card, CardContent, CardHeader, CardFooter } from '@/components/ui/card';
const API_BASE = import.meta.env.PUBLIC_API_BASE || '';
---

<Card className="border-0 shadow-lg bg-gradient-to-br from-white to-gray-50 hover:shadow-xl transition-all duration-300">
	<CardHeader className="pb-4">
		<div class="flex items-center space-x-3">
			<div class="w-8 h-8 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm">1</div>
			<h2 class="text-2xl font-bold text-gray-800">Avatar Identity</h2>
		</div>
		<p class="text-gray-600 mt-2">Define your avatar's personality so we can create stickers that truly represent your character</p>
	</CardHeader>
	<CardContent className="space-y-8">
		<!-- Basic Information -->
		<div class="grid md:grid-cols-2 gap-6">
			<div class="space-y-2">
				<label class="text-sm font-medium text-black-700">Sticker Group Name *</label>
				<input 
					type="text" 
					placeholder="e.g., My Sticker Group" 
					class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all hover:border-gray-300"
					id="stickerGroupName"
				/>
			</div>
			<div class="space-y-2">
				<label class="text-sm font-medium text-black-700">Avatar Type *</label>
				<select class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all hover:border-gray-300" id="avatarType">
					<option>Assistant</option>
					<option>Customer Support</option>
					<option>Personal Helper</option>
					<option>Educational Tutor</option>
					<option>Entertainment Bot</option>
					<option>Professional Guide</option>
					<option>Creative Partner</option>
					<option>Other</option>
				</select>
			</div>
		</div>

		<!-- Avatar Description -->
		<div class="space-y-2 mt-8">
			<label class="text-sm font-medium text-black-700">What will your avatar help with? *</label>
			<textarea 
				placeholder="Describe what your avatar will do and how it will help users. This helps us create the right personality and stickers..."
				class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all h-24 resize-none hover:border-gray-300"
				id="avatarDescription"
			>My Tech Assistant helps users with technical questions, provides support, and makes technology more accessible through friendly conversations.</textarea>
		</div>

		<!-- Avatar Personality -->
		<div class="space-y-4 mt-8">
			<label class="text-sm font-medium text-black-700">Avatar Personality *</label>
			<p class="text-sm text-gray-500">Select 3-5 traits that best describe your avatar's personality</p>
			<div class="grid grid-cols-2 md:grid-cols-4 gap-3" id="personalityTraits">
				{[
					{ name: 'Friendly', icon: '😊', selected: true },
					{ name: 'Professional', icon: '👔', selected: true },
					{ name: 'Helpful', icon: '🤝', selected: true },
					{ name: 'Innovative', icon: '💡', selected: false },
					{ name: 'Trustworthy', icon: '🛡️', selected: false },
					{ name: 'Creative', icon: '🎨', selected: false },
					{ name: 'Energetic', icon: '⚡', selected: false },
					{ name: 'Reliable', icon: '🔒', selected: false }
				].map((trait) => (
					<button 
						class={`p-3 rounded-lg border-2 transition-all text-left hover:scale-105 transform ${
							trait.selected 
								? 'border-indigo-500 bg-indigo-50 text-indigo-700 shadow-md' 
								: 'border-gray-200 hover:border-gray-300 text-gray-600 hover:shadow-sm'
						}`}
						data-trait={trait.name}
					>
						<div class="text-lg mb-1">{trait.icon}</div>
						<div class="text-sm font-medium">{trait.name}</div>
					</button>
				))}
			</div>
		</div>



	</CardContent>
</Card>

<!-- Save Button Outside Card -->
<div class="flex justify-end mt-6">
	<button 
		class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-lg font-semibold transition-all disabled:pointer-events-none disabled:opacity-50 px-8 py-4 bg-purple-600 hover:bg-purple-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105 duration-200"
		id="saveBrandIdentity"
	>
		<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
		</svg>
		Save Avatar Identity
	</button>
</div>

<script is:inline>
	document.addEventListener('DOMContentLoaded', function() {
		const envEl = document.getElementById('env-brand');
		const API_BASE = (envEl && envEl.getAttribute('data-api-base')) || '';
		const params = new URLSearchParams(window.location.search);
		const groupId = params.get('groupId');

		async function loadGroup() {
			if (!groupId) return;
			try {
				const res = await fetch(`${API_BASE}/sticker-groups/${groupId}`, { credentials: 'include' });
				if (!res.ok) return;
				const data = await res.json();
				// Populate inputs
				const nameEl = /** @type {HTMLInputElement|null} */ (document.getElementById('stickerGroupName'));
				if (nameEl && typeof data?.name === 'string') nameEl.value = data.name;
				// If latest config has input, try to populate known fields
				const latestCfg = Array.isArray(data?.configs) ? data.configs[0] : null;
				const input = latestCfg?.input || {};
				const avatarTypeEl = /** @type {HTMLSelectElement|null} */ (document.getElementById('avatarType'));
				if (avatarTypeEl && typeof input.avatarType === 'string') avatarTypeEl.value = input.avatarType;
				const descEl = /** @type {HTMLTextAreaElement|null} */ (document.getElementById('avatarDescription'));
				if (descEl && typeof input.avatarDescription === 'string') descEl.value = input.avatarDescription;
				// Personality traits
				if (Array.isArray(input.personalityTraits)) {
					document.querySelectorAll('[data-trait]').forEach(btn => {
						const el = btn instanceof HTMLElement ? btn : null;
						const name = el?.dataset?.trait;
						const selected = !!(name && input.personalityTraits.includes(name));
						if (el) {
							el.classList.toggle('border-indigo-500', selected);
							el.classList.toggle('bg-indigo-50', selected);
							el.classList.toggle('text-indigo-700', selected);
							el.classList.toggle('shadow-md', selected);
							el.classList.toggle('border-gray-200', !selected);
							el.classList.toggle('text-gray-600', !selected);
						}
					});
				}
			} catch (e) {
				console.error('Failed to load group', e);
			}
		}

		loadGroup();
		// Personality traits selection
		const traitButtons = document.querySelectorAll('[data-trait]');
		traitButtons.forEach(button => {
			button.addEventListener('click', function() {
				const isSelected = this.classList.contains('border-indigo-500');
				const selectedCount = document.querySelectorAll('[data-trait].border-indigo-500').length;
				
				if (isSelected || selectedCount < 5) {
					this.classList.toggle('border-indigo-500');
					this.classList.toggle('bg-indigo-50');
					this.classList.toggle('text-indigo-700');
					this.classList.toggle('shadow-md');
					this.classList.toggle('border-gray-200');
					this.classList.toggle('text-gray-600');
				}
			});
		});


		// Save button
		const saveButton = document.getElementById('saveBrandIdentity');
		if (saveButton) {
			saveButton.addEventListener('click', async function() {
				// Get form data
				const formData = {
					collectionName: document.getElementById('stickerGroupName')?.value,
					avatarType: document.getElementById('avatarType')?.value,
					avatarDescription: document.getElementById('avatarDescription')?.value,
					targetAudience: document.getElementById('targetAudience')?.value,
					personalityTraits: Array.from(document.querySelectorAll('[data-trait].border-indigo-500')).map(btn => btn.dataset.trait)
				};
				
				// Save to backend if editing an existing group
				if (groupId) {
					try {
						await fetch(`${API_BASE}/sticker-groups/${groupId}`, {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							credentials: 'include',
							body: JSON.stringify({
								name: formData.collectionName,
								input: {
									avatarType: formData.avatarType,
									avatarDescription: formData.avatarDescription,
									personalityTraits: formData.personalityTraits
								}
							})
						});
					} catch (e) {
						console.error('Failed to save group', e);
					}
				}

				// Store in session storage
				sessionStorage.setItem('avatarIdentity', JSON.stringify(formData));
				
				// Emit custom event to move to next step
				window.dispatchEvent(new CustomEvent('stepCompleted', { 
					detail: { step: 'avatarIdentity', data: formData } 
				}));
			});
		}
	});
</script>
<div id="env-brand" data-api-base={API_BASE} class="hidden"></div>
