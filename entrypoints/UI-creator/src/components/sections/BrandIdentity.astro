---
import { Card, CardContent, CardHeader, CardFooter } from '@/components/ui/card';
const API_BASE = import.meta.env.PUBLIC_API_BASE || '';
---

<Card className="border-0 shadow-lg bg-gradient-to-br from-white to-gray-50 hover:shadow-xl transition-all duration-300">
	<CardHeader className="pb-4">
		<div class="flex items-center space-x-3">
			<div class="w-8 h-8 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm">1</div>
			<h2 class="text-2xl font-bold text-gray-800">Avatar Identity</h2>
		</div>
		<p class="text-gray-600 mt-2">Define your avatar's personality so we can create stickers that truly represent your character</p>
	</CardHeader>
	<CardContent className="space-y-8">
		<!-- Basic Information -->
		<div class="grid md:grid-cols-2 gap-6">
			<div class="space-y-2">
				<label class="text-sm font-medium text-black-700">Sticker Group Name *</label>
				<input 
					type="text" 
					placeholder="e.g., My Sticker Group" 
					class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all hover:border-gray-300"
					id="stickerGroupName"
				/>
			</div>
			<div class="space-y-2">
				<label class="text-sm font-medium text-black-700">Avatar Type *</label>
				<select class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all hover:border-gray-300" id="avatarType">
					<option>Assistant</option>
					<option>Customer Support</option>
					<option>Personal Helper</option>
					<option>Educational Tutor</option>
					<option>Entertainment Bot</option>
					<option>Professional Guide</option>
					<option>Creative Partner</option>
					<option>Other</option>
				</select>
			</div>
		</div>

		<!-- Avatar Description -->
		<div class="space-y-2 mt-8">
			<label class="text-sm font-medium text-black-700">What will your avatar help with? *</label>
			<textarea 
				placeholder="Describe what your avatar will do and how it will help users. Focus on the context and scenarios where stickers will be used..."
				class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all h-24 resize-none hover:border-gray-300"
				id="avatarDescription"
			></textarea>
		</div>





	</CardContent>
</Card>

<!-- Save Button Outside Card -->
<div class="flex justify-end mt-6">
	<button 
		class="cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-lg font-semibold transition-all disabled:pointer-events-none disabled:opacity-50 px-8 py-4 bg-purple-600 hover:bg-purple-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105 duration-200"
		id="saveBrandIdentity"
	>
		<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
		</svg>
		Save Avatar Identity
	</button>
</div>

<script is:inline>
	document.addEventListener('DOMContentLoaded', function() {
		const envEl = document.getElementById('env-brand');
		const API_BASE = (envEl && envEl.getAttribute('data-api-base')) || '';
		const params = new URLSearchParams(window.location.search);
		const groupId = params.get('groupId');

		// Populate from centralized state after StickerCreator load
		window.addEventListener('groupDataLoaded', () => {
			const state = (window).stickitGroupState || {};
			const nameEl = /** @type {HTMLInputElement|null} */ (document.getElementById('stickerGroupName'));
			if (nameEl && typeof state?.name === 'string') nameEl.value = state.name;
			const bi = state?.input?.brandIdentity || {};
			const avatarTypeEl = /** @type {HTMLSelectElement|null} */ (document.getElementById('avatarType'));
			if (avatarTypeEl && typeof bi.avatarType === 'string') avatarTypeEl.value = bi.avatarType;
			const descEl = /** @type {HTMLTextAreaElement|null} */ (document.getElementById('avatarDescription'));
			if (descEl && typeof bi.avatarDescription === 'string') descEl.value = bi.avatarDescription;
		});



		// Save button
		const saveButton = document.getElementById('saveBrandIdentity');
		if (saveButton) {
			saveButton.addEventListener('click', async function() {
				// Get form data
				const formData = {
					collectionName: document.getElementById('stickerGroupName')?.value,
					avatarType: document.getElementById('avatarType')?.value,
					avatarDescription: document.getElementById('avatarDescription')?.value
				};
				
				// Update centralized state and request unified save
				window.dispatchEvent(new CustomEvent('sectionDataUpdated', { detail: {
					name: formData.collectionName,
					brandIdentity: {
						avatarType: formData.avatarType,
						avatarDescription: formData.avatarDescription
					}
				}}));
				window.dispatchEvent(new CustomEvent('requestSave'));

				// Store in session storage
				sessionStorage.setItem('avatarIdentity', JSON.stringify(formData));
				
				// Emit custom event to move to next step
				window.dispatchEvent(new CustomEvent('stepCompleted', { 
					detail: { step: 'avatarIdentity', data: formData } 
				}));
			});
		}
	});
</script>
<div id="env-brand" data-api-base={API_BASE} class="hidden"></div>
