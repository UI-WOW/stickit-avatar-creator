---
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
---

<Card className="border-0 shadow-lg bg-gradient-to-br from-white to-gray-50 hover:shadow-xl transition-all duration-300">
	<CardHeader className="pb-4">
		<div class="flex items-center space-x-3">
			<div class="w-8 h-8 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-sm">3</div>
			<h2 class="text-2xl font-bold text-gray-800">Sticker Generation</h2>
		</div>
		<p class="text-gray-600 mt-2">Generate and manage your AI assistant's sticker collection</p>
	</CardHeader>
	<CardContent className="space-y-8">
		<!-- Add Sticker Button -->
		<div class="text-center">
			<Button size="lg" className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 px-8 py-4 text-lg" id="addStickerBtn">
				<svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
				</svg>
				Add New Sticker
			</Button>
			<p class="text-sm text-gray-500 mt-3">Create custom stickers for specific scenarios</p>
		</div>
		<!-- Generated Stickers with Metadata -->
		<div class="space-y-6 p-8">
			<div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
				<h3 class="text-lg font-semibold text-gray-800">Generated Stickers</h3>
				<div class="flex flex-wrap gap-2 w-full sm:w-auto">
					<Button variant="outline" size="sm" className="flex-1 sm:flex-none bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 hover:from-indigo-600 hover:via-purple-600 hover:to-pink-600 text-white border-0" id="regenerateAll">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
						</svg>
						<span class="whitespace-nowrap">Regenerate All</span>
					</Button>
					<Button variant="outline" size="sm" className="flex-1 sm:flex-none" id="downloadAll">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
						</svg>
						<span class="whitespace-nowrap">Download All</span>
					</Button>
					<Button variant="outline" size="sm" className="flex-1 sm:flex-none" id="previewInChat">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
						</svg>
						<span class="whitespace-nowrap">Preview in Chat</span>
					</Button>
				</div>
			</div>
		</div>
			
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="stickersContainer">
				{[
					{ 
						name: 'Happy Response', 
						scenario: 'When user is satisfied with the result',
						icon: '😊',
						description: 'Shows satisfaction and positive feedback'
					},
					{ 
						name: 'Surprised Reaction', 
						scenario: 'When unexpected results occur',
						icon: '😲',
						description: 'Expresses surprise or amazement'
					},
					{ 
						name: 'Celebration', 
						scenario: 'When user achieves something',
						icon: '🎉',
						description: 'Celebrates achievements and milestones'
					},
					{ 
						name: 'Helpful Assistant', 
						scenario: 'When offering assistance',
						icon: '🤝',
						description: 'Shows willingness to help'
					},
					{ 
						name: 'Excited Announcement', 
						scenario: 'When announcing new features',
						icon: '🚀',
						description: 'Expresses excitement about updates'
					},
					{ 
						name: 'Thinking Process', 
						scenario: 'When processing complex requests',
						icon: '🤔',
						description: 'Shows the AI is working on a solution'
					},
					{ 
						name: 'Confused State', 
						scenario: 'When clarification is needed',
						icon: '😕',
						description: 'Indicates need for more information'
					},
					{ 
						name: 'Grateful Response', 
						scenario: 'When thanking the user',
						icon: '🙏',
						description: 'Expresses gratitude and appreciation'
					}
				].map((sticker, i) => (
					<div class="bg-white rounded-xl border border-gray-200 p-6 shadow-sm hover:shadow-lg transition-all duration-300 hover:border-indigo-200" data-sticker-id={i}>
						<!-- Sticker Preview -->
						<div class="w-32 h-32 mx-auto bg-gradient-to-br from-indigo-100 to-purple-100 rounded-lg flex items-center justify-center mb-6 hover:scale-110 transition-transform duration-200">
							<img src="/dummy-sticker.webp" alt={sticker.name} class="w-24 h-24 rounded-lg hover:scale-105 transition-transform duration-200" />
						</div>
						
						<!-- Sticker Details -->
						<div class="space-y-4">
							<!-- Title and Icon -->
							<div class="flex items-center justify-center space-x-2">
								<span class="text-2xl">{sticker.icon}</span>
								<h4 class="font-semibold text-gray-800 text-lg">{sticker.name}</h4>
							</div>
							
							<p class="text-sm text-gray-600 text-center">{sticker.description}</p>
							
							<!-- Usage Scenario -->
							<div class="bg-gray-50 rounded-lg p-3">
								<div class="text-xs font-medium text-gray-500 mb-1">USED WHEN:</div>
								<div class="text-sm text-gray-700">{sticker.scenario}</div>
							</div>
							
							<!-- Actions -->
							<div class="flex gap-2 flex-wrap">
								<Button variant="outline" size="sm" className="flex-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 hover:from-indigo-600 hover:via-purple-600 hover:to-pink-600 text-white border-0 regenerate-sticker" data-sticker-id={i}>
									<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
									</svg>
									Regenerate
								</Button>
								<Button variant="outline" size="sm" className="flex-1 modify-sticker" data-sticker-id={i}>
									<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
									</svg>
									Modify
								</Button>
								<Button variant="outline" size="sm" className="flex-1 text-red-600 hover:text-red-700 delete-sticker" data-sticker-id={i}>
									<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
									</svg>
									Delete
								</Button>
							</div>
						</div>
					</div>
				))}
			</div>
		</div>
	</CardContent>
</Card>

<!-- See It In Action Button Outside Card -->
<div class="flex justify-end mt-6">
	<button 
		class="cursor-pointer inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-lg font-semibold transition-all disabled:pointer-events-none disabled:opacity-50 px-8 py-4 bg-purple-600 hover:bg-purple-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105 duration-200"
		id="seeItInActionBtn"
	>
		<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
		</svg>
		See It In Action
	</button>
</div>

<!-- Go Back Button -->
<div class="flex justify-center mt-4">
	<button 
		class="cursor-pointer inline-flex items-center justify-center gap-2 px-4 py-2 text-sm font-medium text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors duration-200"
		id="goBackStickerGeneration"
	>
		<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
		</svg>
		Back to Avatar Creation
	</button>
</div>

<!-- Add Sticker Modal -->
<div id="addStickerModal" class="fixed inset-0 bg-black/30 backdrop-blur-sm hidden items-center justify-center z-[9999]">
	<div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl transform transition-all duration-300 scale-95 opacity-0" id="modalContent">
		<div class="flex items-center justify-between mb-6">
			<h3 class="text-2xl font-bold text-gray-800">Add New Sticker</h3>
			<button id="closeModalBtn" class="text-gray-400 hover:text-gray-600 transition-colors">
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
		</div>
		
		<form class="space-y-6" id="addStickerForm">
			<!-- Sticker Title -->
			<div class="space-y-2">
				<label class="text-sm font-medium text-gray-700">Sticker Title *</label>
				<input 
					type="text" 
					placeholder="e.g., Happy Response, Celebration, Helpful Assistant..."
					class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all hover:border-gray-300"
					required
					id="stickerTitle"
				/>
			</div>
			
			<!-- Scenario -->
			<div class="space-y-2">
				<label class="text-sm font-medium text-gray-700">When should this sticker be used? *</label>
				<textarea 
					placeholder="e.g., When user is satisfied with the result, When announcing new features, When offering assistance..."
					class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all h-20 resize-none hover:border-gray-300"
					required
					id="stickerScenario"
				></textarea>
			</div>
			
			<!-- Additional Notes -->
			<div class="space-y-2">
				<label class="text-sm font-medium text-gray-700">Additional Notes (Optional)</label>
				<textarea 
					placeholder="Any specific details about how this sticker should look or behave..."
					class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all h-16 resize-none hover:border-gray-300"
					id="stickerNotes"
				></textarea>
			</div>
			
			<!-- Action Buttons -->
			<div class="flex gap-3 pt-4">
				<Button type="button" variant="outline" className="flex-1" id="cancelBtn">
					Cancel
				</Button>
				<Button type="submit" className="flex-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 hover:from-indigo-600 hover:via-purple-600 hover:to-pink-600 text-white border-0 shadow-sm hover:shadow-md transition-all duration-200">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
					</svg>
					Generate Sticker
				</Button>
			</div>
		</form>
	</div>
</div>

<!-- Edit Sticker Modal -->
<div id="editStickerModal" class="fixed inset-0 bg-black/30 backdrop-blur-sm hidden items-center justify-center z-[9999]">
	<div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl transform transition-all duration-300 scale-95 opacity-0" id="editModalContent">
		<div class="flex items-center justify-between mb-6">
			<h3 class="text-2xl font-bold text-gray-800">Edit Sticker</h3>
			<button id="closeEditModalBtn" class="text-gray-400 hover:text-gray-600 transition-colors">
				<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
		</div>
		
		<form class="space-y-6" id="editStickerForm">
			<!-- Sticker Title -->
			<div class="space-y-2">
				<label class="text-sm font-medium text-gray-700">Sticker Title *</label>
				<input 
					type="text" 
					placeholder="e.g., Happy Response, Celebration, Helpful Assistant..."
					class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all hover:border-gray-300"
					required
					id="editStickerTitle"
				/>
			</div>
			
			<!-- Scenario -->
			<div class="space-y-2">
				<label class="text-sm font-medium text-gray-700">When should this sticker be used? *</label>
				<textarea 
					placeholder="e.g., When user is satisfied with the result, When announcing new features, When offering assistance..."
					class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all h-20 resize-none hover:border-gray-300"
					required
					id="editStickerScenario"
				></textarea>
			</div>
			
			<!-- Additional Notes -->
			<div class="space-y-2">
				<label class="text-sm font-medium text-gray-700">Additional Notes (Optional)</label>
				<textarea 
					placeholder="Any specific details about how this sticker should look or behave..."
					class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all h-16 resize-none hover:border-gray-300"
					id="editStickerNotes"
				></textarea>
			</div>
			
			<!-- Action Buttons -->
			<div class="flex gap-3 pt-4">
				<Button type="button" variant="outline" className="flex-1" id="cancelEditBtn">
					Cancel
				</Button>
				<Button type="submit" className="flex-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 hover:from-indigo-600 hover:via-purple-600 hover:to-pink-600 text-white border-0 shadow-sm hover:shadow-md transition-all duration-200">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Update & Regenerate
				</Button>
			</div>
		</form>
	</div>
</div>

<script is:inline>
	document.addEventListener('DOMContentLoaded', function() {
		const modal = document.getElementById('addStickerModal');
		const addBtn = document.getElementById('addStickerBtn');
		const closeBtn = document.getElementById('closeModalBtn');
		const cancelBtn = document.getElementById('cancelBtn');
		
		// Edit modal elements
		const editModal = document.getElementById('editStickerModal');
		const closeEditBtn = document.getElementById('closeEditModalBtn');
		const cancelEditBtn = document.getElementById('cancelEditBtn');
		const form = document.getElementById('addStickerForm');
		
		// Sticker management
		let generatedStickers = []; // Store generated stickers
		const API_BASE = 'http://localhost:8002';
		
		// Load JSZip library for ZIP creation
		let JSZip;
		if (typeof window !== 'undefined') {
			const script = document.createElement('script');
			script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
			script.onload = () => {
				JSZip = window.JSZip;
				console.log('✅ JSZip library loaded');
			};
			document.head.appendChild(script);
		}
		
		// Helper function to update stickers display
		function updateStickersDisplay() {
			const container = document.getElementById('stickersContainer');
			if (!container) return;
			
			// Clear existing content
			container.innerHTML = '';
			
			// Add generated stickers
			generatedStickers.forEach((sticker, index) => {
				const stickerElement = createStickerElement(sticker, index);
				container.appendChild(stickerElement);
			});
			
			// Add default stickers if no generated ones
			if (generatedStickers.length === 0) {
				const defaultStickers = [
					{ 
						name: 'Happy Response', 
						scenario: 'When user is satisfied with the result',
						icon: '😊',
						description: 'Shows satisfaction and positive feedback'
					},
					{ 
						name: 'Surprised Reaction', 
						scenario: 'When unexpected results occur',
						icon: '😲',
						description: 'Expresses surprise or amazement'
					},
					{ 
						name: 'Celebration', 
						scenario: 'When user achieves something',
						icon: '🎉',
						description: 'Celebrates achievements and milestones'
					},
					{ 
						name: 'Helpful Assistant', 
						scenario: 'When offering assistance',
						icon: '🤝',
						description: 'Shows willingness to help'
					}
				];
				
				defaultStickers.forEach((sticker, index) => {
					const stickerElement = createDefaultStickerElement(sticker, index);
					container.appendChild(stickerElement);
				});
			}
		}
		
		// Helper function to create sticker element
		function createStickerElement(sticker, index) {
			const div = document.createElement('div');
			div.className = 'bg-white rounded-xl border border-gray-200 p-6 shadow-sm hover:shadow-lg transition-all duration-300 hover:border-indigo-200 relative group';
			div.setAttribute('data-sticker-id', sticker.id);
			
			// Check if this is a generating sticker
			const isGenerating = sticker.isGenerating || !sticker.url;
			
			div.innerHTML = `
				<!-- Delete Button - Top Right Corner -->
				${!isGenerating ? `
					<button class="absolute top-3 right-3 p-1.5 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-full transition-all duration-200 delete-sticker opacity-0 group-hover:opacity-100" data-sticker-id="${sticker.id}" title="Delete sticker">
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
						</svg>
					</button>
				` : `
					<button class="absolute top-3 right-3 p-1.5 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-full transition-all duration-200 delete-sticker" data-sticker-id="${sticker.id}" title="Cancel">
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				`}
				
				<!-- Sticker Preview -->
				<div class="w-32 h-32 mx-auto bg-gradient-to-br from-indigo-100 to-purple-100 rounded-lg flex items-center justify-center mb-6 hover:scale-110 transition-transform duration-200">
					${isGenerating ? `
						<div class="w-full h-full flex flex-col items-center justify-center">
							<div class="animate-spin rounded-full h-12 w-12 border-4 border-indigo-500 border-t-transparent mb-3"></div>
							<div class="text-xs text-indigo-600 font-medium text-center px-2">Generating ${sticker.name}...</div>
						</div>
					` : `
						<img src="${sticker.url}" alt="${sticker.name}" class="w-24 h-24 rounded-lg hover:scale-105 transition-transform duration-200" />
					`}
				</div>
				
				<!-- Sticker Details -->
				<div class="space-y-4">
					<!-- Title -->
					<div class="flex items-center justify-center space-x-2">
						<h4 class="font-semibold text-gray-800 text-lg">${sticker.name}</h4>
					</div>
					
					<p class="text-sm text-gray-600 text-center">${sticker.description}</p>
					
					<!-- Usage Scenario -->
					<div class="bg-gray-50 rounded-lg p-3">
						<div class="text-xs font-medium text-gray-500 mb-1">USED WHEN:</div>
						<div class="text-sm text-gray-700">${sticker.scenario}</div>
					</div>
					
					<!-- Actions -->
					<div class="flex gap-2 flex-wrap">
						${isGenerating ? `
							<button class="flex-1 bg-gray-300 text-gray-500 px-4 py-2.5 rounded-lg text-sm font-medium cursor-not-allowed flex items-center justify-center" disabled>
								<svg class="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
								</svg>
								Generating...
							</button>
						` : `
							<button class="flex-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 hover:from-indigo-600 hover:via-purple-600 hover:to-pink-600 text-white px-4 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 regenerate-sticker flex items-center justify-center shadow-sm hover:shadow-md" data-sticker-id="${sticker.id}">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
								</svg>
								Regenerate
							</button>
							<button class="flex-1 bg-purple-500 hover:bg-purple-600 text-white px-4 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 edit-sticker flex items-center justify-center shadow-sm hover:shadow-md" data-sticker-id="${sticker.id}">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
								</svg>
								Modify
							</button>
							<button class="flex-1 bg-green-500 hover:bg-green-600 text-white px-4 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 download-sticker flex items-center justify-center shadow-sm hover:shadow-md" data-sticker-id="${sticker.id}">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
								</svg>
								Download
							</button>
						`}
					</div>
				</div>
			`;
			
			return div;
		}
		
		// Helper function to create default sticker element
		function createDefaultStickerElement(sticker, index) {
			const div = document.createElement('div');
			div.className = 'bg-white rounded-xl border border-gray-200 p-6 shadow-sm hover:shadow-lg transition-all duration-300 hover:border-indigo-200';
			div.setAttribute('data-sticker-id', index);
			
			div.innerHTML = `
				<!-- Sticker Preview -->
				<div class="w-32 h-32 mx-auto bg-gradient-to-br from-indigo-100 to-purple-100 rounded-lg flex items-center justify-center mb-6 hover:scale-110 transition-transform duration-200">
					<img src="/dummy-sticker.webp" alt="${sticker.name}" class="w-24 h-24 rounded-lg hover:scale-105 transition-transform duration-200" />
				</div>
				
				<!-- Sticker Details -->
				<div class="space-y-4">
					<!-- Title and Icon -->
					<div class="flex items-center justify-center space-x-2">
						<span class="text-2xl">${sticker.icon}</span>
						<h4 class="font-semibold text-gray-800 text-lg">${sticker.name}</h4>
					</div>
					
					<p class="text-sm text-gray-600 text-center">${sticker.description}</p>
					
					<!-- Usage Scenario -->
					<div class="bg-gray-50 rounded-lg p-3">
						<div class="text-xs font-medium text-gray-500 mb-1">USED WHEN:</div>
						<div class="text-sm text-gray-700">${sticker.scenario}</div>
					</div>
					
					<!-- Actions -->
					<div class="flex gap-2 flex-wrap">
						<button class="flex-1 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 hover:from-indigo-600 hover:via-purple-600 hover:to-pink-600 text-white border-0 px-3 py-2 rounded-md text-sm font-medium transition-all duration-200 generate-default-sticker" data-sticker-id="${index}">
							<svg class="w-3 h-3 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
							</svg>
							Generate
						</button>
					</div>
				</div>
			`;
			
			return div;
		}
		
		// Helper function to save stickers to centralized state
		function saveStickersToState() {
			console.log('💾 Saving stickers to centralized state:', generatedStickers.length, 'stickers');
			
			window.dispatchEvent(new CustomEvent('sectionDataUpdated', { 
				detail: {
					stickerGeneration: {
						stickers: generatedStickers
					}
				}
			}));
			window.dispatchEvent(new CustomEvent('requestSave'));
		}
		
		// Helper function to download individual sticker
		async function downloadSticker(sticker) {
			if (!sticker.url) {
				console.error('No URL available for sticker:', sticker.name);
				return;
			}
			
			try {
				// Fetch the image
				const response = await fetch(sticker.url);
				if (!response.ok) throw new Error('Failed to fetch image');
				
				const blob = await response.blob();
				
				// Create download link
				const url = window.URL.createObjectURL(blob);
				const link = document.createElement('a');
				link.href = url;
				link.download = `${sticker.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.png`;
				
				// Trigger download
				document.body.appendChild(link);
				link.click();
				document.body.removeChild(link);
				
				// Clean up
				window.URL.revokeObjectURL(url);
				
				console.log('✅ Downloaded sticker:', sticker.name);
			} catch (error) {
				console.error('❌ Failed to download sticker:', error);
				alert(`Failed to download ${sticker.name}: ${error.message}`);
			}
		}
		
		// Helper function to download all stickers as ZIP
		async function downloadAllStickers() {
			if (generatedStickers.length === 0) {
				alert('No stickers to download');
				return;
			}
			
			if (!JSZip) {
				alert('ZIP library not loaded yet. Please wait a moment and try again.');
				return;
			}
			
			try {
				const zip = new JSZip();
				let downloadCount = 0;
				
				// Show loading state
				const downloadBtn = document.getElementById('downloadAll');
				const originalContent = downloadBtn.innerHTML;
				downloadBtn.innerHTML = `
					<svg class="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Preparing ZIP...
				`;
				downloadBtn.disabled = true;
				
				// Add each sticker to the ZIP
				for (const sticker of generatedStickers) {
					if (!sticker.url) continue;
					
					try {
						const response = await fetch(sticker.url);
						if (!response.ok) continue;
						
						const blob = await response.blob();
						const fileName = `${sticker.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.png`;
						
						zip.file(fileName, blob);
						downloadCount++;
						
						// Update progress
						downloadBtn.innerHTML = `
							<svg class="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
							</svg>
							Adding ${downloadCount}/${generatedStickers.length}...
						`;
					} catch (error) {
						console.error('Failed to add sticker to ZIP:', sticker.name, error);
					}
				}
				
				if (downloadCount === 0) {
					alert('No valid stickers found to download');
					downloadBtn.innerHTML = originalContent;
					downloadBtn.disabled = false;
					return;
				}
				
				// Generate and download ZIP
				downloadBtn.innerHTML = `
					<svg class="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Creating ZIP...
				`;
				
				const zipBlob = await zip.generateAsync({ type: 'blob' });
				
				// Download the ZIP
				const url = window.URL.createObjectURL(zipBlob);
				const link = document.createElement('a');
				link.href = url;
				link.download = `stickit-stickers-${new Date().toISOString().split('T')[0]}.zip`;
				
				document.body.appendChild(link);
				link.click();
				document.body.removeChild(link);
				
				// Clean up
				window.URL.revokeObjectURL(url);
				
				// Reset button
				downloadBtn.innerHTML = originalContent;
				downloadBtn.disabled = false;
				
				console.log(`✅ Downloaded ${downloadCount} stickers as ZIP`);
			} catch (error) {
				console.error('❌ Failed to create ZIP:', error);
				alert(`Failed to create ZIP: ${error.message}`);
				
				// Reset button
				const downloadBtn = document.getElementById('downloadAll');
				downloadBtn.innerHTML = originalContent;
				downloadBtn.disabled = false;
			}
		}
		
		// Helper function to show loading state for existing stickers
		function showStickerLoadingState(stickerId, message) {
			const stickerElement = document.querySelector(`[data-sticker-id="${stickerId}"]`);
			if (!stickerElement) return;
			
			const previewArea = stickerElement.querySelector('.w-32.h-32');
			const regenerateBtn = stickerElement.querySelector('.regenerate-sticker');
			
			if (previewArea) {
				previewArea.innerHTML = `
					<div class="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-indigo-100 to-purple-100 rounded-lg">
						<div class="animate-spin rounded-full h-12 w-12 border-4 border-indigo-500 border-t-transparent mb-3"></div>
						<div class="text-xs text-indigo-600 font-medium text-center px-2">${message}</div>
					</div>
				`;
			}
			
			// Update the regenerate button with loading state
			if (regenerateBtn) {
				regenerateBtn.innerHTML = `
					<svg class="w-3 h-3 mr-1 inline animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Regenerating...
				`;
				regenerateBtn.disabled = true;
			}
		}
		
		// Helper function to show loading state for default stickers
		function showDefaultStickerLoadingState(stickerIndex, message) {
			const stickerElement = document.querySelector(`[data-sticker-id="${stickerIndex}"]`);
			if (!stickerElement) return;
			
			const previewArea = stickerElement.querySelector('.w-32.h-32');
			if (previewArea) {
				previewArea.innerHTML = `
					<div class="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-indigo-100 to-purple-100 rounded-lg">
						<div class="animate-spin rounded-full h-12 w-12 border-4 border-indigo-500 border-t-transparent mb-3"></div>
						<div class="text-xs text-indigo-600 font-medium text-center px-2">${message}</div>
					</div>
				`;
			}
		}
		
		// Helper function to show error state for existing stickers
		function showStickerErrorState(stickerId, message) {
			const stickerElement = document.querySelector(`[data-sticker-id="${stickerId}"]`);
			if (!stickerElement) return;
			
			const previewArea = stickerElement.querySelector('.w-32.h-32');
			if (previewArea) {
				previewArea.innerHTML = `
					<div class="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-red-100 to-pink-100 rounded-lg">
						<div class="text-red-500 mb-2">
							<svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
						</div>
						<div class="text-xs text-red-600 font-medium text-center px-2">${message}</div>
						<button class="mt-2 text-xs text-red-500 hover:text-red-700 underline" onclick="location.reload()">Retry</button>
					</div>
				`;
			}
		}
		
		// Helper function to show error state for default stickers
		function showDefaultStickerErrorState(stickerIndex, message) {
			const stickerElement = document.querySelector(`[data-sticker-id="${stickerIndex}"]`);
			if (!stickerElement) return;
			
			const previewArea = stickerElement.querySelector('.w-32.h-32');
			if (previewArea) {
				previewArea.innerHTML = `
					<div class="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-red-100 to-pink-100 rounded-lg">
						<div class="text-red-500 mb-2">
							<svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
						</div>
						<div class="text-xs text-red-600 font-medium text-center px-2">${message}</div>
						<button class="mt-2 text-xs text-red-500 hover:text-red-700 underline" onclick="location.reload()">Retry</button>
					</div>
				`;
			}
		}
		
		
		function openModal() {
			if (modal) {
				modal.classList.remove('hidden');
				modal.classList.add('flex');
				document.body.style.overflow = 'hidden';
				// Animate modal in
				setTimeout(() => {
					const modalContent = document.getElementById('modalContent');
					if (modalContent) {
						modalContent.classList.remove('scale-95', 'opacity-0');
						modalContent.classList.add('scale-100', 'opacity-100');
					}
				}, 10);
			}
		}
		
		function closeModal() {
			if (modal) {
				// Animate modal out
				const modalContent = document.getElementById('modalContent');
				if (modalContent) {
					modalContent.classList.remove('scale-100', 'opacity-100');
					modalContent.classList.add('scale-95', 'opacity-0');
				}
				// Close after animation
				setTimeout(() => {
					modal.classList.add('hidden');
					modal.classList.remove('flex');
					document.body.style.overflow = 'auto';
					// Clear form
					const titleInput = document.getElementById('stickerTitle');
					const scenarioInput = document.getElementById('stickerScenario');
					const notesInput = document.getElementById('stickerNotes');
					if (titleInput) titleInput.value = '';
					if (scenarioInput) scenarioInput.value = '';
					if (notesInput) notesInput.value = '';
				}, 300);
			}
		}
		
		function openEditModal(stickerId) {
			// Find the sticker to edit
			const sticker = generatedStickers.find(s => s.id === stickerId);
			if (!sticker) return;
			
			// Prefill the form with current sticker data
			document.getElementById('editStickerTitle').value = sticker.name;
			document.getElementById('editStickerScenario').value = sticker.scenario;
			document.getElementById('editStickerNotes').value = sticker.notes || '';
			
			// Store the sticker ID for later use
			editModal.setAttribute('data-editing-sticker-id', stickerId);
			
			// Show modal with animation
			if (editModal) {
				editModal.classList.remove('hidden');
				editModal.classList.add('flex');
				document.body.style.overflow = 'hidden';
				
				// Animate modal in
				const editModalContent = document.getElementById('editModalContent');
				if (editModalContent) {
					setTimeout(() => {
						editModalContent.classList.remove('scale-95', 'opacity-0');
						editModalContent.classList.add('scale-100', 'opacity-100');
					}, 10);
				}
			}
		}
		
		function closeEditModal() {
			if (editModal) {
				// Animate modal out
				const editModalContent = document.getElementById('editModalContent');
				if (editModalContent) {
					editModalContent.classList.remove('scale-100', 'opacity-100');
					editModalContent.classList.add('scale-95', 'opacity-0');
				}
				// Close after animation
				setTimeout(() => {
					editModal.classList.add('hidden');
					editModal.classList.remove('flex');
					document.body.style.overflow = 'auto';
					
					// Clear form
					const titleInput = document.getElementById('editStickerTitle');
					const scenarioInput = document.getElementById('editStickerScenario');
					const notesInput = document.getElementById('editStickerNotes');
					if (titleInput) titleInput.value = '';
					if (scenarioInput) scenarioInput.value = '';
					if (notesInput) notesInput.value = '';
					
					// Clear stored sticker ID
					editModal.removeAttribute('data-editing-sticker-id');
				}, 300);
			}
		}
		
		async function handleSubmit(event) {
			event.preventDefault();
			
			const title = document.getElementById('stickerTitle')?.value;
			const scenario = document.getElementById('stickerScenario')?.value;
			const notes = document.getElementById('stickerNotes')?.value;
			
			if (!title || !scenario) {
				// Show inline validation error
				const errorDiv = document.createElement('div');
				errorDiv.className = 'bg-red-50 border border-red-200 rounded-lg p-3 mb-4';
				errorDiv.innerHTML = `
					<div class="flex items-center">
						<svg class="w-5 h-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span class="text-red-700 text-sm">Please fill in the required fields (Title and Scenario)</span>
					</div>
				`;
				
				// Insert error message at the top of the form
				const form = document.getElementById('addStickerForm');
				if (form) {
					form.insertBefore(errorDiv, form.firstChild);
					
					// Remove error message after 3 seconds
					setTimeout(() => {
						if (errorDiv.parentNode) {
							errorDiv.parentNode.removeChild(errorDiv);
						}
					}, 3000);
				}
				return;
			}
			
			console.log('🎨 Generating new sticker:', { title, scenario, notes });
			
			// Create a temporary sticker with loading state
			const tempStickerId = `temp-${Date.now()}`;
			const tempSticker = {
				id: tempStickerId,
				name: title,
				scenario: scenario,
				description: `A sticker for: ${scenario}`,
				notes: notes || '',
				url: null, // Will be set when generation completes
				isGenerating: true
			};
			
			// Add to generated stickers array
			generatedStickers.push(tempSticker);
			
			// Update the UI to show the new sticker with loading state
			updateStickersDisplay();
			
			// Close modal immediately
			closeModal();
			
			// Scroll to the new sticker
			setTimeout(() => {
				const newStickerElement = document.querySelector(`[data-sticker-id="${tempStickerId}"]`);
				if (newStickerElement) {
					newStickerElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
				}
			}, 100);
			
			try {
				// Get centralized state for brand identity and avatar creation
				const state = window.stickitGroupState || {};
				const brandIdentity = state.input?.brandIdentity || {};
				const avatarCreation = state.input?.avatarCreation || {};
				
				// Get group ID from URL params
				const params = new URLSearchParams(window.location.search);
				const groupId = params.get('groupId');
				
				// Prepare sticker data
				const stickerData = {
					name: title,
					scenario: scenario,
					description: `A sticker for: ${scenario}`,
					notes: notes || ''
				};
				
				// Prepare request payload
				const payload = {
					stickerData,
					brandIdentity,
					avatarCreation,
					groupId
				};
				
				console.log('🚀 Sending sticker generation request to API...');
				
				// Call the API
				const response = await fetch(`${API_BASE}/generate-sticker`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					credentials: 'include',
					body: JSON.stringify(payload)
				});
				
				if (!response.ok) {
					const errorData = await response.json();
					console.error('❌ API request failed:', errorData);
					throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
				}
				
				const result = await response.json();
				
				// Find and update the temporary sticker
				const tempStickerIndex = generatedStickers.findIndex(s => s.id === tempStickerId);
				if (tempStickerIndex !== -1) {
					// Replace the temporary sticker with the real one
					generatedStickers[tempStickerIndex] = result.sticker;
					
					// Update the UI
					updateStickersDisplay();
					
					// Save to centralized state
					saveStickersToState();
					
					// Show success feedback with a subtle animation
					const container = document.getElementById('stickersContainer');
					if (container) {
						container.style.transform = 'scale(1.02)';
						container.style.transition = 'transform 0.3s ease';
						setTimeout(() => {
							container.style.transform = 'scale(1)';
						}, 300);
					}
				}
				
			} catch (error) {
				console.error('❌ Sticker generation failed:', error);
				
				// Show error state in the sticker card
				showStickerErrorState(tempStickerId, `Failed to generate: ${error.message}`);
			}
		}
		
		async function handleEditSubmit(event) {
			event.preventDefault();
			
			const title = document.getElementById('editStickerTitle')?.value;
			const scenario = document.getElementById('editStickerScenario')?.value;
			const notes = document.getElementById('editStickerNotes')?.value;
			
			if (!title || !scenario) {
				// Show inline validation error
				const errorDiv = document.createElement('div');
				errorDiv.className = 'bg-red-50 border border-red-200 rounded-lg p-3 mb-4';
				errorDiv.innerHTML = `
					<div class="flex items-center">
						<svg class="w-5 h-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span class="text-red-700 text-sm">Please fill in the required fields (Title and Scenario)</span>
					</div>
				`;
				
				// Insert error message at the top of the form
				const form = document.getElementById('editStickerForm');
				if (form) {
					form.insertBefore(errorDiv, form.firstChild);
					
					// Remove error message after 3 seconds
					setTimeout(() => {
						if (errorDiv.parentNode) {
							errorDiv.parentNode.removeChild(errorDiv);
						}
					}, 3000);
				}
				return;
			}
			
			// Get the sticker ID being edited
			const stickerId = editModal.getAttribute('data-editing-sticker-id');
			if (!stickerId) return;
			
			// Find the sticker to update
			const stickerIndex = generatedStickers.findIndex(s => s.id === stickerId);
			if (stickerIndex === -1) return;
			
			const existingSticker = generatedStickers[stickerIndex];
			
			// Update the sticker data
			existingSticker.name = title;
			existingSticker.scenario = scenario;
			existingSticker.notes = notes || '';
			existingSticker.description = `A sticker for: ${scenario}`;
			
			// Show loading state
			showStickerLoadingState(stickerId, 'Updating sticker...');
			
			// Close modal immediately
			closeEditModal();
			
			try {
				// Get centralized state
				const state = window.stickitGroupState || {};
				const brandIdentity = state.input?.brandIdentity || {};
				const avatarCreation = state.input?.avatarCreation || {};
				
				// Get group ID
				const params = new URLSearchParams(window.location.search);
				const groupId = params.get('groupId');
				
				// Prepare sticker data
				const stickerData = {
					name: title,
					scenario: scenario,
					description: `A sticker for: ${scenario}`,
					notes: notes || ''
				};
				
				// Prepare request payload
				const payload = {
					stickerData,
					brandIdentity,
					avatarCreation,
					groupId
				};
				
				// Call the API
				const response = await fetch(`${API_BASE}/generate-sticker`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					credentials: 'include',
					body: JSON.stringify(payload)
				});
				
				if (!response.ok) {
					const errorData = await response.json();
					throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
				}
				
				const result = await response.json();
				
				// Update the sticker in our array
				generatedStickers[stickerIndex] = result.sticker;
				
				// Update the UI
				updateStickersDisplay();
				
				// Save to centralized state
				saveStickersToState();
				
			} catch (error) {
				console.error('❌ Sticker update failed:', error);
				showStickerErrorState(stickerId, `Failed to update: ${error.message}`);
			}
		}
		
		// Event listeners
		if (addBtn) {
			addBtn.addEventListener('click', openModal);
		}
		
		if (closeBtn) {
			closeBtn.addEventListener('click', closeModal);
		}
		
		if (cancelBtn) {
			cancelBtn.addEventListener('click', closeModal);
		}
		
		if (form) {
			form.addEventListener('submit', handleSubmit);
		}
		
		// Edit modal event listeners
		if (closeEditBtn) {
			closeEditBtn.addEventListener('click', closeEditModal);
		}
		
		if (cancelEditBtn) {
			cancelEditBtn.addEventListener('click', closeEditModal);
		}
		
		const editForm = document.getElementById('editStickerForm');
		if (editForm) {
			editForm.addEventListener('submit', handleEditSubmit);
		}
		
		// Close modal when clicking outside
		if (modal) {
			modal.addEventListener('click', function(e) {
				if (e.target === modal) {
					closeModal();
				}
			});
		}
		
		if (editModal) {
			editModal.addEventListener('click', function(e) {
				if (e.target === editModal) {
					closeEditModal();
				}
			});
		}

		// Regenerate all button
		const regenerateAllBtn = document.getElementById('regenerateAll');
		if (regenerateAllBtn) {
			regenerateAllBtn.addEventListener('click', function() {
				// Show loading state
				const originalContent = this.innerHTML;
				this.innerHTML = `
					<svg class="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Regenerating All...
				`;
				this.disabled = true;
				
				// Find all regenerate buttons and simulate clicks
				const regenerateButtons = document.querySelectorAll('.regenerate-sticker');
				let completedCount = 0;
				const totalCount = regenerateButtons.length;
				
				if (totalCount === 0) {
					// No stickers to regenerate, reset button immediately
					this.innerHTML = originalContent;
					this.disabled = false;
					return;
				}
				
				// Simulate clicks on all regenerate buttons with small delays
				regenerateButtons.forEach((button, index) => {
				setTimeout(() => {
						// Simulate a click on the regenerate button
						button.click();
						
						// Check if this was the last button
						completedCount++;
						if (completedCount === totalCount) {
							// All buttons have been clicked, reset the "Regenerate All" button after a delay
							setTimeout(() => {
								this.innerHTML = originalContent;
								this.disabled = false;
							}, 2000); // Give some time for the last regeneration to start
						}
					}, index * 500); // Stagger the clicks by 500ms to avoid overwhelming the API
				});
			});
		}

		// Function to handle sticker regeneration
		async function regenerateSticker(stickerId, button) {
			// Find the sticker to regenerate
			const stickerIndex = generatedStickers.findIndex(s => s.id === stickerId);
			if (stickerIndex === -1) {
				console.error('Sticker not found for regeneration');
				return;
			}
			
			const existingSticker = generatedStickers[stickerIndex];
			console.log('🔄 Regenerating sticker:', existingSticker.name);
			
			// Show loading state in the sticker preview area
			showStickerLoadingState(stickerId, 'Regenerating sticker...');
			
			try {
				// Get centralized state
				const state = window.stickitGroupState || {};
				const brandIdentity = state.input?.brandIdentity || {};
				const avatarCreation = state.input?.avatarCreation || {};
				
				// Get group ID
				const params = new URLSearchParams(window.location.search);
				const groupId = params.get('groupId');
				
				// Prepare sticker data
				const stickerData = {
					name: existingSticker.name,
					scenario: existingSticker.scenario,
					description: existingSticker.description,
					notes: existingSticker.notes
				};
				
				// Prepare request payload
				const payload = {
					stickerData,
					brandIdentity,
					avatarCreation,
					groupId
				};
				
				console.log('🚀 Sending sticker regeneration request to API...');
				
				// Call the API
				const response = await fetch(`${API_BASE}/generate-sticker`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					credentials: 'include',
					body: JSON.stringify(payload)
				});
				
				if (!response.ok) {
					const errorData = await response.json();
					throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
				}
				
				const result = await response.json();
				
				// Update the sticker in our array
				generatedStickers[stickerIndex] = result.sticker;
				
				// Update the UI
				updateStickersDisplay();
				
				// Save to centralized state
				saveStickersToState();
				
			} catch (error) {
				console.error('❌ Sticker regeneration failed:', error);
				showStickerErrorState(stickerId, `Failed to regenerate: ${error.message}`);
			}
		}
		
		// Function to handle default sticker generation
		async function generateDefaultSticker(stickerIndex, button) {
			// Default sticker data
			const defaultStickers = [
				{ 
					name: 'Happy Response', 
					scenario: 'When user is satisfied with the result',
					description: 'Shows satisfaction and positive feedback',
					notes: 'Default happy response sticker'
				},
				{ 
					name: 'Surprised Reaction', 
					scenario: 'When unexpected results occur',
					description: 'Expresses surprise or amazement',
					notes: 'Default surprised reaction sticker'
				},
				{ 
					name: 'Celebration', 
					scenario: 'When user achieves something',
					description: 'Celebrates achievements and milestones',
					notes: 'Default celebration sticker'
				},
				{ 
					name: 'Helpful Assistant', 
					scenario: 'When offering assistance',
					description: 'Shows willingness to help',
					notes: 'Default helpful assistant sticker'
				}
			];
			
			const stickerData = defaultStickers[stickerIndex];
			console.log('🎨 Generating default sticker:', stickerData.name);
			
			// Show loading state in the sticker preview area
			showDefaultStickerLoadingState(stickerIndex, `Generating ${stickerData.name}...`);
			
			try {
				// Get centralized state
				const state = window.stickitGroupState || {};
				const brandIdentity = state.input?.brandIdentity || {};
				const avatarCreation = state.input?.avatarCreation || {};
				
				// Get group ID
				const params = new URLSearchParams(window.location.search);
				const groupId = params.get('groupId');
				
				// Prepare request payload
				const payload = {
					stickerData,
					brandIdentity,
					avatarCreation,
					groupId
				};
				
				console.log('🚀 Sending default sticker generation request to API...');
				
				// Call the API
				const response = await fetch(`${API_BASE}/generate-sticker`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					credentials: 'include',
					body: JSON.stringify(payload)
				});
				
				if (!response.ok) {
					const errorData = await response.json();
					throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
				}
				
				const result = await response.json();
				console.log('✅ Default sticker generation successful:', result.sticker);
				
				// Add the generated sticker to our array
				generatedStickers.push(result.sticker);
				
				// Update the UI with smooth transition
				updateStickersDisplay();
				
				// Save to centralized state
				saveStickersToState();
				
			} catch (error) {
				console.error('❌ Default sticker generation failed:', error);
				showDefaultStickerErrorState(stickerIndex, `Failed to generate: ${error.message}`);
			}
		}
		
		// Function to delete sticker
		function deleteSticker(stickerId) {
			const stickerIndex = generatedStickers.findIndex(s => s.id === stickerId);
			if (stickerIndex !== -1) {
				const deletedSticker = generatedStickers[stickerIndex];
				
				// Show loading state during deletion
				showStickerLoadingState(stickerId, 'Deleting sticker...');
				
				// Simulate a brief delay for smooth UX
				setTimeout(() => {
					generatedStickers.splice(stickerIndex, 1);
					
					// Update the UI
					updateStickersDisplay();
					
					// Save to centralized state
					saveStickersToState();
					
					console.log('🗑️ Sticker deleted:', deletedSticker.name);
				}, 500);
			}
		}
		
		// Download All button event listener
		const downloadAllBtn = document.getElementById('downloadAll');
		if (downloadAllBtn) {
			downloadAllBtn.addEventListener('click', downloadAllStickers);
		}

		// Event delegation for dynamic buttons
		document.addEventListener('click', function(e) {
			if (e.target.closest('.regenerate-sticker')) {
				const button = e.target.closest('.regenerate-sticker');
				const stickerId = button.dataset.stickerId;
				regenerateSticker(stickerId, button);
			} else if (e.target.closest('.edit-sticker')) {
				const button = e.target.closest('.edit-sticker');
				const stickerId = button.dataset.stickerId;
				openEditModal(stickerId);
			} else if (e.target.closest('.download-sticker')) {
				const button = e.target.closest('.download-sticker');
				const stickerId = button.dataset.stickerId;
				const sticker = generatedStickers.find(s => s.id === stickerId);
				if (sticker) {
					downloadSticker(sticker);
				}
			} else if (e.target.closest('.generate-default-sticker')) {
				const button = e.target.closest('.generate-default-sticker');
				const stickerIndex = parseInt(button.dataset.stickerId);
				generateDefaultSticker(stickerIndex, button);
			} else if (e.target.closest('.delete-sticker')) {
				const button = e.target.closest('.delete-sticker');
				const stickerId = button.dataset.stickerId;
				deleteSticker(stickerId);
			}
		});

		// Preview in chat button
		const previewBtn = document.getElementById('previewInChat');
		if (previewBtn) {
			previewBtn.addEventListener('click', function() {
				// Instead of redirecting, emit event to move to next step
				window.dispatchEvent(new CustomEvent('stepCompleted', { 
					detail: { step: 'stickerGeneration', data: { completed: true } } 
				}));
			});
		}

		// See It In Action button
		const seeItInActionBtn = document.getElementById('seeItInActionBtn');
		if (seeItInActionBtn) {
			seeItInActionBtn.addEventListener('click', function() {
				// Emit event to move to next step
				window.dispatchEvent(new CustomEvent('stepCompleted', { 
					detail: { step: 'stickerGeneration', data: { completed: true } } 
				}));
			});
		}

		// Go back button
		const goBackButton = document.getElementById('goBackStickerGeneration');
		if (goBackButton) {
			goBackButton.addEventListener('click', function() {
				// Emit custom event to go back
				window.dispatchEvent(new CustomEvent('goBack', { 
					detail: { fromStep: 'stickerGeneration' } 
				}));
			});
		}
		
		// Load stickers from centralized state
		window.addEventListener('groupDataLoaded', () => {
			const state = window.stickitGroupState || {};
			const sg = state?.input?.stickerGeneration || {};
			
			if (Array.isArray(sg.stickers)) {
				generatedStickers = sg.stickers;
				console.log('🔄 Restored stickers from state:', generatedStickers.length, 'stickers');
				updateStickersDisplay();
			} else {
				// Initialize with empty array and show default stickers
				generatedStickers = [];
				updateStickersDisplay();
			}
		});
		
		// Initialize display on page load
		updateStickersDisplay();
	});
</script>
