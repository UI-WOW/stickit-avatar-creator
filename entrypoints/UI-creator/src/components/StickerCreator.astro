---
import BrandIdentity from './sections/BrandIdentity.astro';
import AvatarCreation from './sections/AvatarCreation.astro';
import StickerGeneration from './sections/StickerGeneration.astro';
import SeeItInAction from './sections/SeeItInAction.astro';
const API_BASE = import.meta.env.PUBLIC_API_BASE || '';
---

<div class="max-w-4xl mx-auto space-y-8">
	<!-- Centralized Loading UI -->
	<div id="creator-loading" class="hidden text-center py-12">
		<div class="inline-flex items-center gap-3 px-5 py-3 rounded-xl bg-white border border-gray-200 shadow-md text-gray-700">
			<svg class="w-5 h-5 animate-spin text-indigo-600" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
				<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
				<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
			</svg>
			<span>Loading your sticker groupâ€¦</span>
		</div>
	</div>
	<!-- Progress Indicator -->
	<div class="mb-8">
		<div class="flex items-center justify-between mb-4">
			<!-- Desktop Layout -->
			<div class="hidden md:flex items-center justify-between w-full">
				<div class="flex items-center space-x-2 cursor-pointer" data-step="1">
					<div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center transition-all duration-300" id="step1-indicator">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step1-check">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step1-number">1</span>
					</div>
					<span class="text-sm font-medium text-gray-500 transition-colors duration-300" id="step1-label">Avatar Identity</span>
				</div>
				<div class="flex-1 h-0.5 bg-gray-300 mx-4 transition-colors duration-300" id="step1-line"></div>
				<div class="flex items-center space-x-2 cursor-pointer" data-step="2">
					<div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center transition-all duration-300" id="step2-indicator">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step2-check">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step2-number">2</span>
					</div>
					<span class="text-sm font-medium text-gray-500 transition-colors duration-300" id="step2-label">Avatar Design</span>
				</div>
				<div class="flex-1 h-0.5 bg-gray-300 mx-4 transition-colors duration-300" id="step2-line"></div>
				<div class="flex items-center space-x-2 cursor-pointer" data-step="3">
					<div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center transition-all duration-300" id="step3-indicator">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step3-check">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step3-number">3</span>
					</div>
					<span class="text-sm font-medium text-gray-500 transition-colors duration-300" id="step3-label">Sticker Generation</span>
				</div>
				<div class="flex-1 h-0.5 bg-gray-300 mx-4 transition-colors duration-300" id="step3-line"></div>
				<div class="flex items-center space-x-2 cursor-pointer" data-step="4">
					<div class="w-6 h-6 bg-indigo-500 rounded-full flex items-center justify-center text-white text-xs font-bold transition-all duration-300" id="step4-indicator">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step4-check">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step4-number">4</span>
					</div>
					<span class="text-sm font-medium text-indigo-600 transition-colors duration-300" id="step4-label">See It In Action</span>
				</div>
			</div>
			
			<!-- Mobile Layout -->
			<div class="md:hidden flex items-center justify-between w-full">
				<div class="cursor-pointer" data-step="1">
					<div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center transition-all duration-300" id="step1-indicator-mobile">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step1-check-mobile">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step1-number-mobile">1</span>
					</div>
				</div>
				<div class="flex-1 h-0.5 bg-gray-300 mx-2 transition-colors duration-300" id="step1-line-mobile"></div>
				<div class="cursor-pointer" data-step="2">
					<div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center transition-all duration-300" id="step2-indicator-mobile">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step2-check-mobile">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step2-number-mobile">2</span>
					</div>
				</div>
				<div class="flex-1 h-0.5 bg-gray-300 mx-2 transition-colors duration-300" id="step2-line-mobile"></div>
				<div class="cursor-pointer" data-step="3">
					<div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center transition-all duration-300" id="step3-indicator-mobile">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step3-check-mobile">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step3-number-mobile">3</span>
					</div>
				</div>
				<div class="flex-1 h-0.5 bg-gray-300 mx-2 transition-colors duration-300" id="step3-line-mobile"></div>
				<div class="cursor-pointer" data-step="4">
					<div class="w-6 h-6 bg-indigo-500 rounded-full flex items-center justify-center text-white text-xs font-bold transition-all duration-300" id="step4-indicator-mobile">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step4-check-mobile">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step4-number-mobile">4</span>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Mobile: Current Step Label -->
		<div class="md:hidden text-center mb-2">
			<span class="text-sm font-medium text-indigo-600" id="current-step-label">Avatar Identity</span>
		</div>
		
		<div class="w-full bg-gray-200 rounded-full h-2">
			<div class="bg-gradient-to-r from-gray-300 to-indigo-500 h-2 rounded-full transition-all duration-500" id="progress-bar" style="width: 25%"></div>
		</div>
	</div>
	<!-- Section Container (hidden until data loads) -->
	<div id="sections-container" style="display:none">
		<!-- Step 1: Avatar Identity -->
		<div id="section-1" class="section active">
			<BrandIdentity />
		</div>

		<!-- Step 2: Avatar Creation -->
		<div id="section-2" class="section hidden">
			<AvatarCreation />
		</div>

		<!-- Step 3: Sticker Generation -->
		<div id="section-3" class="section hidden">
			<StickerGeneration />
		</div>

		<!-- Step 4: See It In Action -->
		<div id="section-4" class="section hidden">
			<SeeItInAction />
		</div>
	</div>
</div>

<script is:inline>
	document.addEventListener('DOMContentLoaded', function() {
		let currentStep = 1;
		const totalSteps = 4;

		// Centralized loader/state
		const apiBase = (document.getElementById('env-creator')?.getAttribute('data-api-base')) || '';
		const params = new URLSearchParams(window.location.search);
		const groupId = params.get('groupId');
		const sectionsContainer = document.getElementById('sections-container');
		const loadingEl = document.getElementById('creator-loading');
		const hideSections = () => { if (sectionsContainer) sectionsContainer.style.display = 'none'; if (loadingEl) loadingEl.classList.remove('hidden'); };
		const showSections = () => { if (sectionsContainer) sectionsContainer.style.display = ''; if (loadingEl) loadingEl.classList.add('hidden'); };
		// @ts-ignore
		window.stickitGroupState = { name: '', input: { brandIdentity: {}, avatarCreation: {}, stickerGeneration: {} } };

		async function unifiedSave() {
			if (!groupId) return;
			try {
				const payload = { name: window.stickitGroupState.name, input: window.stickitGroupState.input };
				await fetch(`${apiBase}/sticker-groups/${groupId}`, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					credentials: 'include',
					body: JSON.stringify(payload)
				});
			} catch (e) {
				console.error('Unified save failed', e);
			}
		}
		window.addEventListener('sectionDataUpdated', (ev) => {
			const detail = (ev).detail || {};
			if (detail.name !== undefined) window.stickitGroupState.name = detail.name;
			if (detail.brandIdentity) window.stickitGroupState.input.brandIdentity = { ...window.stickitGroupState.input.brandIdentity, ...detail.brandIdentity };
			if (detail.avatarCreation) window.stickitGroupState.input.avatarCreation = { ...window.stickitGroupState.input.avatarCreation, ...detail.avatarCreation };
			if (detail.stickerGeneration) window.stickitGroupState.input.stickerGeneration = { ...window.stickitGroupState.input.stickerGeneration, ...detail.stickerGeneration };
		});
		window.addEventListener('requestSave', () => { unifiedSave(); });

		async function loadGroupIfNeeded() {
			if (!groupId) { showSections(); return; }
			try {
				hideSections();
				const res = await fetch(`${apiBase}/sticker-groups/${groupId}`, { credentials: 'include' });
				if (!res.ok) { showSections(); return; }
				const data = await res.json();
				window.stickitGroupState.name = data?.name || '';
				window.stickitGroupState.input = { brandIdentity: {}, avatarCreation: {}, stickerGeneration: {}, ...(data?.input || {}) };
				window.dispatchEvent(new CustomEvent('groupDataLoaded', { detail: { group: { id: data?.id, name: data?.name, createdAt: data?.createdAt }, apiBase, groupId } }));
			} catch (e) {
				console.error('Failed to load group', e);
			} finally {
				showSections();
			}
		}
		loadGroupIfNeeded();

		// Initialize progress
		updateProgress();

		// Check for URL hash navigation
		const hash = window.location.hash;
		if (hash === '#see-it-in-action') {
			// Navigate directly to the See It In Action section (step 4)
			currentStep = 4;
			goToStep(4);
		}

		// Step navigation
		document.querySelectorAll('[data-step]').forEach(step => {
			step.addEventListener('click', function() {
				const stepNumber = parseInt(this.dataset.step);
				goToStep(stepNumber);
			});
		});

		// Listen for step completion events
		window.addEventListener('stepCompleted', function(event) {
			const { step, data } = event.detail;
			
			if (step === 'avatarIdentity' && currentStep === 1) {
				currentStep = 2;
				goToStep(2);
			} else if (step === 'avatarCreation' && currentStep === 2) {
				currentStep = 3;
				goToStep(3);
			} else if (step === 'stickerGeneration' && currentStep === 3) {
				currentStep = 4;
				goToStep(4);
			} else if (step === 'seeItInAction' && currentStep === 4) {
				// Handle completion - could redirect to success page or show completion message
				console.log('Creation completed!', data);
			}
		});

		// Listen for go back events
		window.addEventListener('goBack', function(event) {
			const { fromStep } = event.detail;
			
			if (fromStep === 'avatarCreation' && currentStep === 2) {
				currentStep = 1;
				goToStep(1);
			} else if (fromStep === 'stickerGeneration' && currentStep === 3) {
				currentStep = 2;
				goToStep(2);
			} else if (fromStep === 'seeItInAction' && currentStep === 4) {
				currentStep = 3;
				goToStep(3);
			}
		});

		function goToStep(stepNumber) {
			// Hide all sections
			document.querySelectorAll('.section').forEach(section => {
				section.classList.add('hidden');
				section.classList.remove('active');
			});

			// Show target section
			const targetSection = document.getElementById(`section-${stepNumber}`);
			if (targetSection) {
				targetSection.classList.remove('hidden');
				targetSection.classList.add('active');
			}

			currentStep = stepNumber;
			updateProgress();
			
			// Scroll to top of the page
			window.scrollTo({ top: 0, behavior: 'smooth' });
		}

		function updateProgress() {
			const progressPercentage = (currentStep / totalSteps) * 100;
			const progressBar = document.getElementById('progress-bar');
			const currentStepLabel = document.getElementById('current-step-label');
			
			if (progressBar) {
				progressBar.style.width = `${progressPercentage}%`;
			}

			// Update mobile current step label
			if (currentStepLabel) {
				const stepLabels = {
					1: 'Avatar Identity',
					2: 'Avatar Design', 
					3: 'Sticker Generation',
					4: 'See It In Action'
				};
				currentStepLabel.textContent = stepLabels[currentStep] || '';
			}

			// Update step indicators (both desktop and mobile)
			for (let i = 1; i <= totalSteps; i++) {
				// Desktop indicators
				const indicator = document.getElementById(`step${i}-indicator`);
				const check = document.getElementById(`step${i}-check`);
				const number = document.getElementById(`step${i}-number`);
				const label = document.getElementById(`step${i}-label`);
				const line = document.getElementById(`step${i}-line`);
				
				// Mobile indicators
				const indicatorMobile = document.getElementById(`step${i}-indicator-mobile`);
				const checkMobile = document.getElementById(`step${i}-check-mobile`);
				const numberMobile = document.getElementById(`step${i}-number-mobile`);
				const lineMobile = document.getElementById(`step${i}-line-mobile`);

				if (i < currentStep) {
					// Completed step
					// Desktop
					indicator?.classList.remove('bg-gray-300', 'bg-indigo-500');
					indicator?.classList.add('bg-green-500');
					check?.classList.remove('hidden');
					number?.classList.add('hidden');
					label?.classList.remove('text-gray-500', 'text-indigo-600');
					label?.classList.add('text-green-600');
					line?.classList.remove('bg-gray-300');
					line?.classList.add('bg-green-500');
					
					// Mobile
					indicatorMobile?.classList.remove('bg-gray-300', 'bg-indigo-500');
					indicatorMobile?.classList.add('bg-green-500');
					checkMobile?.classList.remove('hidden');
					numberMobile?.classList.add('hidden');
					lineMobile?.classList.remove('bg-gray-300');
					lineMobile?.classList.add('bg-green-500');
				} else if (i === currentStep) {
					// Current step
					// Desktop
					indicator?.classList.remove('bg-gray-300', 'bg-green-500');
					indicator?.classList.add('bg-indigo-500');
					check?.classList.add('hidden');
					number?.classList.remove('hidden');
					label?.classList.remove('text-gray-500', 'text-green-600');
					label?.classList.add('text-indigo-600');
					line?.classList.remove('bg-green-500');
					line?.classList.add('bg-gray-300');
					
					// Mobile
					indicatorMobile?.classList.remove('bg-gray-300', 'bg-green-500');
					indicatorMobile?.classList.add('bg-indigo-500');
					checkMobile?.classList.add('hidden');
					numberMobile?.classList.remove('hidden');
					lineMobile?.classList.remove('bg-green-500');
					lineMobile?.classList.add('bg-gray-300');
				} else {
					// Future step
					// Desktop
					indicator?.classList.remove('bg-green-500', 'bg-indigo-500');
					indicator?.classList.add('bg-gray-300');
					check?.classList.add('hidden');
					number?.classList.remove('hidden');
					label?.classList.remove('text-green-600', 'text-indigo-600');
					label?.classList.add('text-gray-500');
					line?.classList.remove('bg-green-500');
					line?.classList.add('bg-gray-300');
					
					// Mobile
					indicatorMobile?.classList.remove('bg-green-500', 'bg-indigo-500');
					indicatorMobile?.classList.add('bg-gray-300');
					checkMobile?.classList.add('hidden');
					numberMobile?.classList.remove('hidden');
					lineMobile?.classList.remove('bg-green-500');
					lineMobile?.classList.add('bg-gray-300');
				}
			}

			// Update progress bar gradient
			if (progressBar) {
				if (currentStep === 1) {
					progressBar.className = 'bg-gradient-to-r from-indigo-500 to-indigo-500 h-2 rounded-full transition-all duration-500';
				} else if (currentStep === 2) {
					progressBar.className = 'bg-gradient-to-r from-green-500 to-indigo-500 h-2 rounded-full transition-all duration-500';
				} else if (currentStep === 3) {
					progressBar.className = 'bg-gradient-to-r from-green-500 via-indigo-500 to-green-500 h-2 rounded-full transition-all duration-500';
				} else if (currentStep === 4) {
					progressBar.className = 'bg-gradient-to-r from-green-500 via-indigo-500 to-purple-500 h-2 rounded-full transition-all duration-500';
				}
			}
		}
	});
</script>

<div id="env-creator" data-api-base={API_BASE} class="hidden"></div>

