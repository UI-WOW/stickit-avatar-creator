---
import BrandIdentity from './sections/BrandIdentity.astro';
import AvatarCreation from './sections/AvatarCreation.astro';
import StickerGeneration from './sections/StickerGeneration.astro';
---

<div class="max-w-4xl mx-auto space-y-8">
	<!-- Progress Indicator -->
	<div class="mb-8">
		<div class="flex items-center justify-between mb-4">
			<div class="flex items-center space-x-4">
				<div class="flex items-center space-x-2 cursor-pointer" data-step="1">
					<div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center transition-all duration-300" id="step1-indicator">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step1-check">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step1-number">1</span>
					</div>
					<span class="text-sm font-medium text-gray-500 transition-colors duration-300" id="step1-label">Brand Identity</span>
				</div>
				<div class="w-8 h-0.5 bg-gray-300 transition-colors duration-300" id="step1-line"></div>
				<div class="flex items-center space-x-2 cursor-pointer" data-step="2">
					<div class="w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center transition-all duration-300" id="step2-indicator">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step2-check">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step2-number">2</span>
					</div>
					<span class="text-sm font-medium text-gray-500 transition-colors duration-300" id="step2-label">Avatar Design</span>
				</div>
				<div class="w-8 h-0.5 bg-gray-300 transition-colors duration-300" id="step2-line"></div>
				<div class="flex items-center space-x-2 cursor-pointer" data-step="3">
					<div class="w-6 h-6 bg-indigo-500 rounded-full flex items-center justify-center text-white text-xs font-bold transition-all duration-300" id="step3-indicator">
						<svg class="w-4 h-4 text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" id="step3-check">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
						</svg>
						<span class="text-white text-xs font-bold" id="step3-number">3</span>
					</div>
					<span class="text-sm font-medium text-indigo-600 transition-colors duration-300" id="step3-label">Sticker Generation</span>
				</div>
			</div>
		</div>
		<div class="w-full bg-gray-200 rounded-full h-2">
			<div class="bg-gradient-to-r from-gray-300 to-indigo-500 h-2 rounded-full transition-all duration-500" id="progress-bar" style="width: 33%"></div>
		</div>
	</div>
	<!-- Section Container -->
	<div id="sections-container">
		<!-- Step 1: Brand Identity -->
		<div id="section-1" class="section active">
			<BrandIdentity />
		</div>

		<!-- Step 2: Avatar Creation -->
		<div id="section-2" class="section hidden">
			<AvatarCreation />
		</div>

		<!-- Step 3: Sticker Generation -->
		<div id="section-3" class="section hidden">
			<StickerGeneration />
		</div>
	</div>
</div>

<script is:inline>
	document.addEventListener('DOMContentLoaded', function() {
		let currentStep = 1;
		const totalSteps = 3;

		// Initialize progress
		updateProgress();

		// Step navigation
		document.querySelectorAll('[data-step]').forEach(step => {
			step.addEventListener('click', function() {
				const stepNumber = parseInt(this.dataset.step);
				if (stepNumber <= currentStep) {
					goToStep(stepNumber);
				}
			});
		});

		// Listen for step completion events
		window.addEventListener('stepCompleted', function(event) {
			const { step, data } = event.detail;
			
			if (step === 'brandIdentity' && currentStep === 1) {
				currentStep = 2;
				goToStep(2);
			} else if (step === 'avatarCreation' && currentStep === 2) {
				currentStep = 3;
				goToStep(3);
			}
		});

		function goToStep(stepNumber) {
			// Hide all sections
			document.querySelectorAll('.section').forEach(section => {
				section.classList.add('hidden');
				section.classList.remove('active');
			});

			// Show target section
			const targetSection = document.getElementById(`section-${stepNumber}`);
			if (targetSection) {
				targetSection.classList.remove('hidden');
				targetSection.classList.add('active');
			}

			currentStep = stepNumber;
			updateProgress();
		}

		function updateProgress() {
			const progressPercentage = (currentStep / totalSteps) * 100;
			const progressBar = document.getElementById('progress-bar');
			
			if (progressBar) {
				progressBar.style.width = `${progressPercentage}%`;
			}

			// Update step indicators
			for (let i = 1; i <= totalSteps; i++) {
				const indicator = document.getElementById(`step${i}-indicator`);
				const check = document.getElementById(`step${i}-check`);
				const number = document.getElementById(`step${i}-number`);
				const label = document.getElementById(`step${i}-label`);
				const line = document.getElementById(`step${i}-line`);

				if (i < currentStep) {
					// Completed step
					indicator?.classList.remove('bg-gray-300', 'bg-indigo-500');
					indicator?.classList.add('bg-green-500');
					check?.classList.remove('hidden');
					number?.classList.add('hidden');
					label?.classList.remove('text-gray-500', 'text-indigo-600');
					label?.classList.add('text-green-600');
					line?.classList.remove('bg-gray-300');
					line?.classList.add('bg-green-500');
				} else if (i === currentStep) {
					// Current step
					indicator?.classList.remove('bg-gray-300', 'bg-green-500');
					indicator?.classList.add('bg-indigo-500');
					check?.classList.add('hidden');
					number?.classList.remove('hidden');
					label?.classList.remove('text-gray-500', 'text-green-600');
					label?.classList.add('text-indigo-600');
					line?.classList.remove('bg-green-500');
					line?.classList.add('bg-gray-300');
				} else {
					// Future step
					indicator?.classList.remove('bg-green-500', 'bg-indigo-500');
					indicator?.classList.add('bg-gray-300');
					check?.classList.add('hidden');
					number?.classList.remove('hidden');
					label?.classList.remove('text-green-600', 'text-indigo-600');
					label?.classList.add('text-gray-500');
					line?.classList.remove('bg-green-500');
					line?.classList.add('bg-gray-300');
				}
			}

			// Update progress bar gradient
			if (progressBar) {
				if (currentStep === 1) {
					progressBar.className = 'bg-gradient-to-r from-indigo-500 to-indigo-500 h-2 rounded-full transition-all duration-500';
				} else if (currentStep === 2) {
					progressBar.className = 'bg-gradient-to-r from-green-500 to-indigo-500 h-2 rounded-full transition-all duration-500';
				} else if (currentStep === 3) {
					progressBar.className = 'bg-gradient-to-r from-green-500 via-indigo-500 to-green-500 h-2 rounded-full transition-all duration-500';
				}
			}
		}
	});
</script>
