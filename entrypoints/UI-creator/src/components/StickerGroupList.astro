---
import StickerGroupCard from '@/components/StickerGroupCard.astro';
const API_BASE = import.meta.env.PUBLIC_API_BASE || '/api';
---

<div id="collections-root" class="space-y-6">
    <div class="text-center text-gray-500" id="collections-loading">Loading your sticker groups...</div>
    <template id="sticker-card-template">
        <StickerGroupCard groupName="__NAME__" stickerCount={5} id="__ID__" createdAt="__CREATED__" showDelete={true} data-stickers="__STICKERS__" />
    </template>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="fixed inset-0 z-50 hidden">
    <div id="delete-modal-overlay" class="absolute inset-0 bg-black/40 backdrop-blur-sm"></div>
    <div class="relative mx-auto mt-24 w-[90%] max-w-md">
        <div class="rounded-xl bg-white shadow-xl border border-gray-200 overflow-hidden">
            <div class="px-5 py-4 border-b">
                <h3 class="text-lg font-semibold text-gray-900">Delete sticker group</h3>
                <p class="mt-1 text-sm text-gray-600">This action cannot be undone.</p>
            </div>
            <div class="px-5 py-4">
                <p class="text-sm text-gray-700">Are you sure you want to delete
                    <span id="delete-modal-name" class="font-semibold text-gray-900"></span>?
                </p>
            </div>
            <div class="px-5 py-4 bg-gray-50 flex justify-end gap-2">
                <button id="delete-modal-cancel" class="px-4 py-2 text-sm rounded-md border border-gray-300 text-gray-700 hover:bg-gray-100">Cancel</button>
                <button id="delete-modal-confirm" class="px-4 py-2 text-sm rounded-md bg-red-600 text-white hover:bg-red-700">Delete</button>
            </div>
        </div>
    </div>
</div>

<script>
    // @ts-nocheck
    const API_BASE = import.meta.env.PUBLIC_API_BASE || '';
    /** @type {HTMLElement|null} */
    const root = document.getElementById('collections-root');
    /** @type {HTMLElement|null} */
    const loading = document.getElementById('collections-loading');
    /** @type {HTMLTemplateElement | null} */
    const tpl = /** @type {HTMLTemplateElement | null} */ (document.getElementById('sticker-card-template'));
    
    // Load JSZip library for ZIP creation
    let JSZip;
    if (typeof window !== 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js';
        script.onload = () => {
            JSZip = window.JSZip;
            console.log('‚úÖ JSZip library loaded for StickerGroupList');
        };
        document.head.appendChild(script);
    }

    // Modal elements and helpers
    const modal = document.getElementById('delete-modal');
    const modalName = document.getElementById('delete-modal-name');
    const modalCancel = document.getElementById('delete-modal-cancel');
    const modalConfirm = document.getElementById('delete-modal-confirm');
    const modalOverlay = document.getElementById('delete-modal-overlay');

    const showModal = () => modal && modal.classList.remove('hidden');
    const hideModal = () => modal && modal.classList.add('hidden');

    let pendingDeleteId = '';
    let pendingDeleteCard = null;

    function escToClose(e) {
        if (e.key === 'Escape') {
            hideModal();
            document.removeEventListener('keydown', escToClose);
        }
    }

    function openDeleteModal(id, name, cardEl) {
        pendingDeleteId = id;
        pendingDeleteCard = cardEl;
        if (modalName) modalName.textContent = name ? `"${name}"` : 'this collection';
        if (modalCancel) modalCancel.onclick = () => hideModal();
        if (modalOverlay) modalOverlay.onclick = () => hideModal();
        if (modalConfirm) {
            modalConfirm.onclick = async () => {
                try {
                    const r = await fetch(`${API_BASE}/sticker-groups/${pendingDeleteId}`, { method: 'DELETE', credentials: 'include' });
                    if (!r.ok) throw new Error('Delete failed');
                    pendingDeleteCard && pendingDeleteCard.remove();
                    hideModal();
                } catch (e) {
                    alert('Failed to delete');
                    console.error(e);
                }
            };
        }
        document.addEventListener('keydown', escToClose);
        showModal();
    }

    /** @type {(html: string) => (Element|null)} */
    const htmlToElement = (html) => {
        const template = document.createElement('template');
        template.innerHTML = html.trim();
        return template.content.firstElementChild;
    };

    /** @type {(cardEl: Element, id: string, name: string) => void} */
    const bindDelete = (cardEl, id, name) => {
        const delBtn = cardEl.querySelector('[data-action="delete"]');
        if (!delBtn) return;
        delBtn.addEventListener('click', () => openDeleteModal(id, name, cardEl));
    };
    
    // Helper function to download individual sticker
    async function downloadSticker(stickerUrl, stickerName) {
        if (!stickerUrl) {
            console.error('No URL available for sticker:', stickerName);
            return;
        }
        
        try {
            // Fetch the image
            const response = await fetch(stickerUrl);
            if (!response.ok) throw new Error('Failed to fetch image');
            
            const blob = await response.blob();
            
            // Create download link
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `${stickerName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.png`;
            
            // Trigger download
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Clean up
            window.URL.revokeObjectURL(url);
            
            console.log('‚úÖ Downloaded sticker:', stickerName);
        } catch (error) {
            console.error('‚ùå Failed to download sticker:', error);
            alert(`Failed to download ${stickerName}: ${error.message}`);
        }
    }

    // Function to download all stickers for a group
    async function downloadAllStickers(button) {
        console.log('üîß downloadAllStickers called with button:', button);
        
        if (!button) {
            console.error('üîß Button is null or undefined!');
            return;
        }
        
        const groupId = button.dataset?.groupId;
        const cardElement = button.closest('div[class*="w-full"][class*="hover:shadow-lg"]');
        
        console.log('üîß Group ID:', groupId);
        console.log('üîß Card element:', cardElement);
        console.log('üîß Card element tagName:', cardElement?.tagName);
        console.log('üîß Card element classes:', cardElement?.className);
        
        if (!cardElement || !groupId) {
            console.error('üîß Could not find card element or group ID');
            alert('Error: Could not find group information');
            return;
        }
        
        const groupNameElement = cardElement.querySelector('h3');
        const groupName = groupNameElement?.textContent || 'Unknown Group';
        
        // Get stickers data from the card
        const stickersData = cardElement.getAttribute('data-stickers');
        console.log('üîç Stickers data from card:', stickersData);
        
        if (!stickersData) {
            console.error('No stickers data found on card element');
            alert('No stickers found for this group');
            return;
        }
        
        // Show loading state
        const originalContent = button.innerHTML;
        
        try {
            const stickers = JSON.parse(stickersData);
            console.log('üîç Parsed stickers:', stickers);
            console.log('üîç Stickers length:', stickers.length);
            
            if (stickers.length === 0) {
                console.log('üîç No stickers to download');
                alert('No stickers to download');
                return;
            }
            
            if (!JSZip) {
                console.log('üîç JSZip not loaded yet');
                alert('ZIP library not loaded yet. Please wait a moment and try again.');
                return;
            }
            
            console.log('üîç JSZip is available, creating ZIP...');
            const zip = new JSZip();
            let downloadCount = 0;
            button.innerHTML = `
                <svg class="w-3 h-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Preparing ZIP...
            `;
            button.disabled = true;
            
            // Add each sticker to the ZIP
            for (const sticker of stickers) {
                console.log('üîç Processing sticker:', sticker);
                if (!sticker.url) {
                    console.log('üîç Skipping sticker - no URL:', sticker);
                    continue;
                }
                
                try {
                    console.log('üîç Fetching sticker URL:', sticker.url);
                    const response = await fetch(sticker.url);
                    console.log('üîç Fetch response status:', response.status);
                    if (!response.ok) {
                        console.log('üîç Skipping sticker - bad response:', response.status);
                        continue;
                    }
                    
                    const blob = await response.blob();
                    console.log('üîç Blob size:', blob.size);
                    const fileName = `${(sticker.name || 'sticker').replace(/[^a-z0-9]/gi, '_').toLowerCase()}.png`;
                    console.log('üîç Adding file to ZIP:', fileName);
                    
                    zip.file(fileName, blob);
                    downloadCount++;
                    
                    // Update progress
                    button.innerHTML = `
                        <svg class="w-3 h-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Adding ${downloadCount}/${stickers.length}...
                    `;
                } catch (error) {
                    console.error('Failed to add sticker to ZIP:', sticker.name, error);
                }
            }
            
            console.log('üîç Total stickers added to ZIP:', downloadCount);
            
            if (downloadCount === 0) {
                console.log('üîç No valid stickers found to download');
                alert('No valid stickers found to download');
                button.innerHTML = originalContent;
                button.disabled = false;
                return;
            }
            
            // Generate and download ZIP
            button.innerHTML = `
                <svg class="w-3 h-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Creating ZIP...
            `;
            
            console.log('üîç Generating ZIP blob...');
            const zipBlob = await zip.generateAsync({ type: 'blob' });
            console.log('üîç ZIP blob size:', zipBlob.size);
            
            // Download the ZIP
            const url = window.URL.createObjectURL(zipBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `${groupName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}-stickers-${new Date().toISOString().split('T')[0]}.zip`;
            
            console.log('üîç Download link created:', link.href);
            console.log('üîç Download filename:', link.download);
            
            document.body.appendChild(link);
            console.log('üîç Triggering download...');
            link.click();
            document.body.removeChild(link);
            
            // Clean up
            window.URL.revokeObjectURL(url);
            
            // Reset button
            button.innerHTML = originalContent;
            button.disabled = false;
            
            console.log(`‚úÖ Downloaded ${downloadCount} stickers as ZIP for group: ${groupName}`);
        } catch (error) {
            console.error('‚ùå Failed to create ZIP:', error);
            alert(`Failed to create ZIP: ${error instanceof Error ? error.message : 'Unknown error'}`);
            
            // Reset button
            button.innerHTML = originalContent;
            button.disabled = false;
        }
    }
    

    async function loadCollections() {
        if (!root) return;
        try {
            const url = `${API_BASE}/sticker-groups`;
            const res = await fetch(url, { credentials: 'include' });
            if (!res.ok) {
                const t = await res.text().catch(() => '');
                throw new Error(`Request failed (${res.status}): ${t}`);
            }
            const data = await res.json();
            const items = Array.isArray(data?.items) ? data.items : [];

            if (items.length === 0) {
                if (loading) loading.remove();
                const empty = document.createElement('div');
                empty.className = 'text-center text-gray-500';
                empty.textContent = 'No sticker groups yet. Create your first group to get started!';
                root.appendChild(empty);
                return;
            }

            // Update loading text to show we're processing the data
            if (loading) {
                loading.textContent = `Found ${items.length} sticker group${items.length !== 1 ? 's' : ''}. Loading details...`;
            }

            const list = document.createElement('div');
            list.className = 'grid grid-cols-1 gap-4';

            for (let i = 0; i < items.length; i++) {
                const col = items[i];
                
                // Update loading progress
                if (loading) {
                    loading.textContent = `Loading sticker group ${i + 1} of ${items.length}...`;
                }
                
                // Allow UI to update
                await new Promise(resolve => setTimeout(resolve, 10));
                
                // Create card with loading state first
                const raw = (tpl?.innerHTML || '')
                    .replaceAll('__ID__', String(col.id ?? ''))
                    .replaceAll('__NAME__', String(col.name ?? 'Untitled'))
                    .replaceAll('__CREATED__', String(col.createdAt ?? Date.now()))
                    .replaceAll('__STICKERS__', '[]');
                const cardEl = htmlToElement(raw);
                if (cardEl) {
                    bindDelete(cardEl, col.id, String(col.name ?? ''));
                    
                    // Show loading state
                    const countElement = cardEl.querySelector('.sticker-count');
                    if (countElement) {
                        countElement.innerHTML = `
                            <div class="flex items-center gap-2">
                                <div class="w-4 h-4 border-2 border-gray-300 border-t-purple-500 rounded-full animate-spin"></div>
                                <span class="text-gray-400">Loading...</span>
                            </div>
                        `;
                    }
                    
                    const previewContainer = cardEl.querySelector('.sticker-preview-container');
                    if (previewContainer) {
                        previewContainer.innerHTML = `
                            <div class="flex gap-3 flex-wrap py-2">
                                <div class="w-20 h-20 bg-gray-200 rounded-xl animate-pulse flex-shrink-0"></div>
                                <div class="w-20 h-20 bg-gray-200 rounded-xl animate-pulse flex-shrink-0"></div>
                                <div class="w-20 h-20 bg-gray-200 rounded-xl animate-pulse flex-shrink-0"></div>
                            </div>
                        `;
                    }
                    
                    list.appendChild(cardEl);
                }
                
                // Fetch the actual sticker data for this group
                let stickersData = '[]';
                try {
                    const groupRes = await fetch(`${API_BASE}/sticker-groups/${col.id}`, { credentials: 'include' });
                    if (groupRes.ok) {
                        const groupData = await groupRes.json();
                        
                        // Try different possible paths for stickers
                        let stickers = [];
                        
                        // Path 1: input.stickerGeneration.stickers
                        if (groupData.input?.stickerGeneration?.stickers) {
                            stickers = groupData.input.stickerGeneration.stickers;
                        }
                        // Path 2: input.stickers (direct)
                        else if (groupData.input?.stickers) {
                            stickers = groupData.input.stickers;
                        }
                        
                        console.log('üîç Sticker data for group', col.id, ':', stickers);
                        console.log('üîç Full group data:', groupData);
                        console.log('üîç Sticker URLs:', stickers.map(s => s?.url));
                        stickersData = JSON.stringify(stickers);
                        console.log('üîç Setting stickersData to:', stickersData);
                    }
                } catch (err) {
                    console.error('‚ùå Error fetching group data for:', col.id, err);
                }
                
                // Update the card with actual data
                if (cardEl) {
                    try {
                        const stickers = JSON.parse(stickersData);
                        
                        // Update the data-stickers attribute on the card element
                        console.log('üîç Setting data-stickers on card element to:', stickersData);
                        cardEl.setAttribute('data-stickers', stickersData);
                        console.log('üîç Card element data-stickers after setting:', cardEl.getAttribute('data-stickers'));
                        
                        // Update sticker count
                        const countElement = cardEl.querySelector('.sticker-count');
                        if (countElement) {
                            countElement.textContent = `${stickers.length} sticker${stickers.length !== 1 ? 's' : ''}`;
                        }
                        
                        // Update sticker preview
                        const previewContainer = cardEl.querySelector('.sticker-preview-container');
                        if (previewContainer) {
                            if (stickers.length === 0) {
                                previewContainer.innerHTML = `
                                    <div class="flex gap-3 flex-wrap py-2">
                                        <div class="w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl flex items-center justify-center shadow-md flex-shrink-0">
                                            <div class="w-14 h-14 bg-gray-300 rounded-lg flex items-center justify-center">
                                                <span class="text-xs text-gray-500">Empty</span>
                                            </div>
                                        </div>
                                    </div>
                                `;
                            } else {
                                const stickersToShow = stickers.slice(0, 6);
                                const remainingCount = Math.max(0, stickers.length - 6);
                                
                                previewContainer.innerHTML = `
                                    <div class="flex gap-3 flex-wrap py-2">
                                        ${stickersToShow.map((sticker: any, i: number) => `
                                            <div class="w-20 h-20 bg-gradient-to-br from-blue-100 to-purple-100 rounded-xl flex items-center justify-center hover:scale-110 transition-transform duration-200 shadow-md flex-shrink-0 cursor-pointer download-individual-sticker" data-sticker-url="${sticker.url || ''}" data-sticker-name="${sticker.name || 'Sticker ' + (i + 1)}" title="Click to download">
                                                ${sticker.url ? 
                                                    `<img src="${sticker.url}" alt="${sticker.name || 'Sticker ' + (i + 1)}" class="w-14 h-14 rounded-lg" />` : 
                                                    `<div class="w-14 h-14 bg-gray-200 rounded-lg flex items-center justify-center">
                                                        <span class="text-xs text-gray-500">No image</span>
                                                    </div>`
                                                }
                                            </div>
                                        `).join('')}
                                        ${remainingCount > 0 ? `
                                            <div class="w-20 h-20 bg-gradient-to-br from-indigo-100 to-purple-100 rounded-xl flex items-center justify-center shadow-md flex-shrink-0">
                                                <span class="text-xs font-medium text-indigo-600">+${remainingCount}</span>
                                            </div>
                                        ` : ''}
                                    </div>
                                `;
                            }
                        }
                    } catch (e) {
                        // Handle parsing errors silently
                    }
                }
            }

            // Only remove loading and add the list after all cards are fully rendered
            if (loading) loading.remove();
            root.appendChild(list);
        } catch (err) {
            if (loading) loading.remove();
            if (root) {
                const e = document.createElement('div');
                e.className = 'text-center text-red-600';
                e.textContent = 'Failed to load collections.';
                root.appendChild(e);
            }
            console.error(err);
        }
    }

    // Event delegation for download buttons
    document.addEventListener('click', function(e) {
        console.log('üîß StickerGroupList - Click detected on:', e.target);
        
        // Handle individual sticker downloads
        if (e.target && (e.target as Element).closest('.download-individual-sticker')) {
            console.log('üîß StickerGroupList - Individual sticker download clicked');
            const stickerElement = (e.target as Element).closest('.download-individual-sticker');
            const stickerUrl = (stickerElement as HTMLElement)?.dataset.stickerUrl;
            const stickerName = (stickerElement as HTMLElement)?.dataset.stickerName;
            
            if (stickerUrl) {
                downloadSticker(stickerUrl, stickerName);
            } else {
                alert('No image available for this sticker');
            }
        }
        // Handle group download buttons
        else if (e.target && (e.target as Element).closest('.download-group-btn')) {
            console.log('üîß StickerGroupList - Group download button clicked, handling download');
            const button = (e.target as Element).closest('.download-group-btn');
            downloadAllStickers(button);
        }
        
    });

    loadCollections();
</script>




